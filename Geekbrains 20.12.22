1.
#Вычислить число Пи c заданной точностью d
#Пример:
#    - при d = 0.0001,  π = 3.1415    10^-1 ≤ d ≤10^-10

pi = "3.14159265358"
d = str(input("Введите точность d, 10^-1 ≤ d ≤10^-10, например 0.0001:  "))
print(pi[slice(len(d))])

2.
#Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.

n = int(input("n="))

# составим список lst состоящий из простых чисел до числа n, с помощью алгоритма из поста на Хабр.ком
lst=[2]
for i in range(3, n+1, 2):
	if (i > 10) and (i%10==5):
		continue
	for j in lst:
		if j*j-1 > i:
			lst.append(i)
			break
		if (i % j == 0):
			break
	else:
		lst.append(i)
print(lst)
lst2 = []

#используем список простых чисел lst, для нахождения простых множителей числа n, в виде списка lst2
while n > 1:
    for j in lst:
        if n % j == 0:
            lst2.append(j)
            n = n / j
            break
print(lst2)

3.
#Задайте последовательность чисел. Напишите программу, которая выведет список неповторяющихся элементов исходной последовательности.
#Пример:
#- Ввод:[1,1,2,4,5,6,7,7,8], результат: [2,4,5,6,8]

N = [1,1,2,4,5,6,7,7,8]
lst = []
# превратим последовательность чисел во множество s, 
# а затем с помощью вспомогательного списка lst, будем удалять повторяющиеся элементы из множества. в конце выводим на экран множество в виде списка Y.
s = set(N)
for i in N:
    if i not in lst:
        lst.append(i)
    elif i in lst:
        s.discard(i)
Y = list(s)
print(Y)


4.
#Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100)* многочлена и записать в файл многочлен степени k.#
#    *Пример:*
#    - k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0
#    -  k=5 => 2*x^5 + 4*x^4 + 2*x^3 + 2*x^2 + 4*x + 5 = 0
import random
k = int(input("Введите натуральную степень к: "))
N = 0
my_string = ""
znak = "+"
for i in range(k, -1, -1):
    N = random.randint(-100, 100)
    stroka = str(N)
    if stroka[0] == "-":
        znak = "-"
    else:
        znak = "+"
    if i == 0:
        my_string += f' {znak} {abs(N)} = 0'
    elif i == k:
        my_string += f' {N}X^{i}'
    elif i == 1:
        my_string += f' {znak} {abs(N)}X'
    elif N != 0 :
        my_string += f' {znak} {abs(N)}X^{i}'

print(my_string)
