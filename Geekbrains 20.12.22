1.
#Вычислить число Пи c заданной точностью d
#Пример:
#    - при d = 0.0001,  π = 3.1415    10^-1 ≤ d ≤10^-10

pi = "3.14159265358"
d = str(input("Введите точность d, 10^-1 ≤ d ≤10^-10, например 0.0001:  "))
print(pi[slice(len(d))])

2.
#Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.

n = int(input("n="))

# составим список lst состоящий из простых чисел до числа n, с помощью алгоритма из поста на Хабр.ком
lst=[2]
for i in range(3, n+1, 2):
	if (i > 10) and (i%10==5):
		continue
	for j in lst:
		if j*j-1 > i:
			lst.append(i)
			break
		if (i % j == 0):
			break
	else:
		lst.append(i)
print(lst)
lst2 = []

#используем список простых чисел lst, для нахождения простых множителей числа n, в виде списка lst2
while n > 1:
    for j in lst:
        if n % j == 0:
            lst2.append(j)
            n = n / j
            break
print(lst2)

3.
#Задайте последовательность чисел. Напишите программу, которая выведет список неповторяющихся элементов исходной последовательности.
#Пример:
#- Ввод:[1,1,2,4,5,6,7,7,8], результат: [2,4,5,6,8]

N = [1,1,2,4,5,6,7,7,8]
lst = []
# превратим последовательность чисел во множество s, 
# а затем с помощью вспомогательного списка lst, будем удалять повторяющиеся элементы из множества. в конце выводим на экран множество в виде списка Y.
s = set(N)
for i in N:
    if i not in lst:
        lst.append(i)
    elif i in lst:
        s.discard(i)
Y = list(s)
print(Y)


4.
#Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100)* многочлена и записать в файл многочлен степени k.#
#    *Пример:*
#    - k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0
#    -  k=5 => 2*x^5 + 4*x^4 + 2*x^3 + 2*x^2 + 4*x + 5 = 0
import random
k = int(input("Введите натуральную степень к: "))
N = 0
my_string = ""
znak = "+"
for i in range(k, -1, -1):
    N = random.randint(-100, 100)
    stroka = str(N)
    if stroka[0] == "-":
        znak = "-"
    else:
        znak = "+"
    if i == 0:
        my_string += f' {znak} {abs(N)} = 0'
    elif i == k:
        my_string += f' {N}X^{i}'
    elif i == 1:
        my_string += f' {znak} {abs(N)}X'
    elif N != 0 :
        my_string += f' {znak} {abs(N)}X^{i}'
	
#print(my_string)

with open('task_4.txt', 'w') as data:
    data.write(my_string)


#Даны два файла, в каждом из которых находится запись многочлена.
#Задача - сформировать файл, содержащий сумму многочленов.(одинаковый размер уравнений)*
#*Доп задание: для разного размера уравнения

temp = open('task_5_1.txt', 'r')
stroka1 = temp.read()

temp = open('task_5_2.txt', 'r')
stroka2 = temp.read()

#print(stroka1)
#print(stroka2)
#print(stroka1.split(" "))

stroka1 = stroka1[slice(1, None)]
stroka1 = stroka1[slice(-4)]
znak = '+'
if stroka1[0] == '-':
    znak = '-'
    stroka1 = stroka[slice(1, None)]
lst = stroka1.split(" ")
dict1 = {}
bad = ['','=', '0']

for i in lst:
    if i in bad:
        continue
    elif i == '-':
        znak = '-'
    elif i == '+':
        znak = '+'
    elif 'X' in i:
        if znak == '-':
            i = '-' + i
            #print(i)
        print(i[slice(i.find('X'))])
        print(i[slice(i.find('X'), None, 1)])
        dict1.update({i[slice(i.find('X'), None, 1)]:int(i[slice(i.find('X'))])})
    else:
        if znak == '-':
            i = '-' + i
            #print(i)
        dict1.update({'0':int(i)})
print(dict1)

stroka2 = stroka2[slice(1, None)]
stroka2 = stroka2[slice(-4)]
znak = '+'
if stroka2[0] == '-':
    znak = '-'
    stroka2 = stroka[slice(1, None)]
lst = stroka2.split(" ")
dict2 = {}
bad = ['','=', '0']

for i in lst:
    if i in bad:
        continue
    elif i == '-':
        znak = '-'
    elif i == '+':
        znak = '+'
    elif 'X' in i:
        if znak == '-':
            i = '-' + i
            #print(i)
        print(i[slice(i.find('X'))])
        print(i[slice(i.find('X'), None, 1)])
        dict2.update({i[slice(i.find('X'), None, 1)]:int(i[slice(i.find('X'))])})
    else:
        if znak == '-':
            i = '-' + i
            #print(i)
        dict2.update({'0':int(i)})
print(dict1)
print(dict2)

dict3 = {k: dict1.get(k, 0) + dict2.get(k, 0) for k in set(dict1) | set(dict1)}

import collections
od = collections.OrderedDict(reversed(sorted(dict3.items())))
final_lst = []
for k, v in od.items():
    if k == '0':
        final_lst.append(v)
        break
    final_lst.append(str(v) + str(k))
print(final_lst)
final_string = ""
for i in range(len(final_lst)):
    if i == 0:
        final_string += str(final_lst[0])
    else:
        temp = str(final_lst[i])
        if temp[0] == '-':
            final_string += " - "
            final_string += temp[1:]
        else:
            final_string += " + "
            final_string += temp[1:]
final_string += " = 0"
print(final_string)

with open('task_5_3.txt', 'w') as data:
    data.write(final_string)
    
# уф, какой ужас.
