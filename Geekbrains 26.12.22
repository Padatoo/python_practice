#Создайте программу для игры с конфетами человек против человека.
#Условие задачи: На столе лежит 100 конфета.
# Играют два игрока делая ход друг после друга. Первый ход определяется жеребьёвкой.
# За один ход можно забрать не более чем 28 конфет. Все конфеты оппонента достаются сделавшему последний ход.
# Сколько конфет нужно взять первому игроку, чтобы забрать все конфеты у своего конкурента?
#a) Добавьте игру против бота
#b) Подумайте как наделить бота ""интеллектом""

#игра против человека
totalSweets=101

def CheckEnteredNumber(number):
    try:
        int(number)
        return True
    except ValueError:
        return False

def GetScore(candiesAmount,turn):
    while True:
        if CheckEnteredNumber(candiesAmount):
            candiesAmount=int(candiesAmount)
            if 0<candiesAmount<=28:
                return candiesAmount
            else:
                print("Check your input, it must be integer [1...28].")
                candiesAmount=input(f"Player {turn} turn. Enter number of candies. It should be in range [1...28]: ")
        else:
            print("Check your input, it must be integer [1...28].")
            candiesAmount=input(f"Player {turn} turn. Enter number of candies. It should be in range [1...28]: ")


def Game(candiesNum):
    print("Player 1 the first.")
    turnFlag=1

    while candiesNum>0:
        print(f"{candiesNum} candies left.")
        if turnFlag==1:
            candiesAmount=GetScore(input(f"Player {turnFlag} turn. Enter number of candies. It should be in range [1...28]: "),turnFlag)
            turnFlag=2
        else:
            candiesAmount=GetScore(input(f"Player {turnFlag} turn. Enter number of candies. It should be in range [1...28]: "),turnFlag)
            turnFlag=1
        candiesNum=candiesNum-candiesAmount
    return turnFlag

winName=Game(totalSweets)
if winName==2:
        print("Player 1 is winner!")
else:
        print("Player 2 is winner!")


#2.Создайте программу для игры в ""Крестики-нолики"".
board = [i for i in range(1, 10)]

def draw_board(board):
    print("-------------")
    for i in range(3):
        print("|", board[0 + i * 3], "|", board[1 + i * 3], "|", board[2 + i * 3], "|")
        print("-------------")

def take_input(player_token):
    valid = False
    while not valid:
        player_answer = input("Куда поставим " + player_token+"? ")
        try:
            player_answer = int(player_answer)
        except:
            print("Некорректный ввод. Вы уверены, что ввели число?")
            continue
        if player_answer >= 1 and player_answer <= 9:
            if (str(board[player_answer-1]) not in "XO"):
                board[player_answer-1] = player_token
                valid = True
            else:
                print("Эта клеточка уже занята")
        else:
            print("Некорректный ввод. Введите число от 1 до 9 чтобы походить.")

def check_win(board):
    win_coord = ((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))
    for each in win_coord:
        if board[each[0]] == board[each[1]] == board[each[2]]:
            return board[each[0]]
    return False

def main(board):
    counter = 0
    win = False
    while not win:
        draw_board(board)
        if counter % 2 == 0:
            take_input("X")
        else:
            take_input("O")
        counter += 1
        if counter > 4:
            tmp = check_win(board)
            if tmp:
                print(tmp, "выиграл!")
                win = True
                break
        if counter == 9:
            print("Ничья!")
            break
    draw_board(board)

main(board)

3.
#Реализуйте RLE алгоритм: реализуйте модуль сжатия и восстановления данных.
def rle_encode(data):
    encoding = ''
    prev_char = ''
    count = 1

    if not data:
        return ''
    for char in data:
        if char != prev_char:
            if prev_char:
                encoding += str(count) + prev_char
            count = 1
            prev_char = char
        else:
            count += 1
    else:
        encoding += str(count) + prev_char
        return encoding


print(rle_encode("AAAABBCDDDDDDEJJJK"))
